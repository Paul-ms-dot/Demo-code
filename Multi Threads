import multiprocessing
import threading
import time

# Function to simulate work done by a thread
def thread_task(thread_id, process_id):
    print(f"Thread {thread_id} from Process {process_id} is running.")
    time.sleep(1)  # Simulate work
    print(f"Thread {thread_id} from Process {process_id} finished.")

# Function to simulate work done by a process (spawning multiple threads)
def process_task(process_id, num_threads):
    threads = []
    
    # Create multiple threads in each process
    for thread_id in range(num_threads):
        thread = threading.Thread(target=thread_task, args=(thread_id, process_id))
        threads.append(thread)
        thread.start()
    
    # Join all threads to ensure they complete before the process ends
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    # Number of processes
    num_processes = 3
    
    # Number of threads per process
    num_threads = 2

    processes = []

    # Create multiple processes
    for process_id in range(num_processes):
        process = multiprocessing.Process(target=process_task, args=(process_id, num_threads))
        processes.append(process)
        process.start()

    # Join all processes to ensure they complete
    for process in processes:
        process.join()

    print("All processes and threads finished.")
